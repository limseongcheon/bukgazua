"use strict";exports.id=94,exports.ids=[94],exports.modules={15079:(e,s,r)=>{r.d(s,{bq:()=>p,eb:()=>b,gC:()=>f,l6:()=>d,yv:()=>u});var t=r(60687),n=r(43210),a=r(28695),i=r(61662),o=r(89743),l=r(58450),c=r(4780);let d=a.bL;a.YJ;let u=a.WT,p=n.forwardRef(({className:e,children:s,...r},n)=>(0,t.jsxs)(a.l9,{ref:n,className:(0,c.cn)("flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",e),...r,children:[s,(0,t.jsx)(a.In,{asChild:!0,children:(0,t.jsx)(i.A,{className:"h-4 w-4 opacity-50"})})]}));p.displayName=a.l9.displayName;let g=n.forwardRef(({className:e,...s},r)=>(0,t.jsx)(a.PP,{ref:r,className:(0,c.cn)("flex cursor-default items-center justify-center py-1",e),...s,children:(0,t.jsx)(o.A,{className:"h-4 w-4"})}));g.displayName=a.PP.displayName;let m=n.forwardRef(({className:e,...s},r)=>(0,t.jsx)(a.wn,{ref:r,className:(0,c.cn)("flex cursor-default items-center justify-center py-1",e),...s,children:(0,t.jsx)(i.A,{className:"h-4 w-4"})}));m.displayName=a.wn.displayName;let f=n.forwardRef(({className:e,children:s,position:r="popper",...n},i)=>(0,t.jsx)(a.ZL,{children:(0,t.jsxs)(a.UC,{ref:i,className:(0,c.cn)("relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2","popper"===r&&"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",e),position:r,...n,children:[(0,t.jsx)(g,{}),(0,t.jsx)(a.LM,{className:(0,c.cn)("p-1","popper"===r&&"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"),children:s}),(0,t.jsx)(m,{})]})}));f.displayName=a.UC.displayName,n.forwardRef(({className:e,...s},r)=>(0,t.jsx)(a.JU,{ref:r,className:(0,c.cn)("py-1.5 pl-8 pr-2 text-sm font-semibold",e),...s})).displayName=a.JU.displayName;let b=n.forwardRef(({className:e,children:s,...r},n)=>(0,t.jsxs)(a.q7,{ref:n,className:(0,c.cn)("relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",e),...r,children:[(0,t.jsx)("span",{className:"absolute left-2 flex h-3.5 w-3.5 items-center justify-center",children:(0,t.jsx)(a.VF,{children:(0,t.jsx)(l.A,{className:"h-4 w-4"})})}),(0,t.jsx)(a.p4,{children:s})]}));b.displayName=a.q7.displayName,n.forwardRef(({className:e,...s},r)=>(0,t.jsx)(a.wv,{ref:r,className:(0,c.cn)("-mx-1 my-1 h-px bg-muted",e),...s})).displayName=a.wv.displayName},29523:(e,s,r)=>{r.d(s,{$:()=>c,r:()=>l});var t=r(60687),n=r(43210),a=r(11329),i=r(24224),o=r(4780);let l=(0,i.F)("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-muted hover:text-muted-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}},defaultVariants:{variant:"default",size:"default"}}),c=n.forwardRef(({className:e,variant:s,size:r,asChild:n=!1,...i},c)=>{let d=n?a.DX:"button";return(0,t.jsx)(d,{className:(0,o.cn)(l({variant:s,size:r,className:e})),ref:c,...i})});c.displayName="Button"},34729:(e,s,r)=>{r.d(s,{T:()=>i});var t=r(60687),n=r(43210),a=r(4780);let i=n.forwardRef(({className:e,...s},r)=>(0,t.jsx)("textarea",{className:(0,a.cn)("flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",e),ref:r,...s}));i.displayName="Textarea"},38135:(e,s,r)=>{r.d(s,{hQ:()=>N,en:()=>v,_y:()=>E,K2:()=>A,UF:()=>x,y9:()=>w});var t=r(91199);r(42087);var n=r(87550),a=r.n(n),i=r(7944);r(33873);let o="/tmp/careconnect.db";console.log(`[DB] Database path: ${o}`);let l=new(a())(o);(()=>{if(l.exec(`
        CREATE TABLE IF NOT EXISTS caregivers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            phone TEXT NOT NULL UNIQUE,
            photoUrl TEXT,
            birthDate TEXT NOT NULL,
            gender TEXT NOT NULL,
            certifications TEXT,
            experience TEXT,
            status TEXT NOT NULL DEFAULT '가능',
            unavailableDates TEXT NOT NULL DEFAULT '[]'
        );
    `),console.log('[DB] "caregivers" table structure verified.'),l.prepare("PRAGMA table_info(caregivers)").all().some(e=>"specialNotes"===e.name)||(console.log('[DB] "specialNotes" column not found. Altering table...'),l.exec("ALTER TABLE caregivers ADD COLUMN specialNotes TEXT"),console.log('[DB] "specialNotes" column added successfully.')),0===l.prepare("SELECT COUNT(*) as count FROM caregivers").get().count){console.log("[DB] No data found. Seeding initial caregivers...");let e=l.prepare(`
            INSERT INTO caregivers (name, phone, photoUrl, birthDate, gender, certifications, experience, unavailableDates, status, specialNotes)
            VALUES (@name, @phone, @photoUrl, @birthDate, @gender, @certifications, @experience, @unavailableDates, @status, @specialNotes)
        `);l.transaction(()=>{e.run({name:"김민준",phone:"010-1234-5678",photoUrl:"https://images.unsplash.com/photo-1557862921-37829c790f19?q=80&w=2071&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",birthDate:"1978-05-15",gender:"남성",certifications:"요양보호사 1급, 간병사",experience:"10년 이상",unavailableDates:JSON.stringify(["2024-08-15"]),status:"가능",specialNotes:"거동이 불편하신 어르신 케어 전문입니다."}),e.run({name:"이서연",phone:"010-9876-5432",photoUrl:"https://images.unsplash.com/photo-1544717297-fa95b6ee8643?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",birthDate:"1985-11-20",gender:"여성",certifications:"간호조무사, 요양보호사 1급",experience:"10년 이상",unavailableDates:JSON.stringify([]),status:"가능",specialNotes:"여성 환자 및 수술 후 회복 환자 케어에 강점이 있습니다."})})(),console.log("[DB] Initial data seeded.")}})();let c=e=>({...e,unavailableDates:JSON.parse(e.unavailableDates||"[]")});async function d(){return(0,i.unstable_noStore)(),l.prepare("SELECT * FROM caregivers ORDER BY id DESC").all().map(c)}var u=r(27885),p=r(86939),g=r(16895),m=r(68567),f=r(33331);async function b(e){try{let s=(await d()).filter(s=>{if("여성"===e.patientGender&&"여성"!==s.gender)return!1;if(e.requestedDateRange?.from){let r=(0,u.H)(e.requestedDateRange.from),t=e.requestedDateRange.to?(0,u.H)(e.requestedDateRange.to):r;if((0,p.k)({start:r,end:t}).some(e=>(s.unavailableDates||[]).includes(e.toISOString().split("T")[0])))return!1}return"가능"===s.status});if(0===s.length)return console.log("선택한 조건에 맞는 근무 가능한 간병인이 없습니다."),{recommendations:[]};let r=(function(e){for(let s=e.length-1;s>0;s--){let r=Math.floor(Math.random()*(s+1));[e[s],e[r]]=[e[r],e[s]]}return e})(s).slice(0,3).map(e=>{let s=e.birthDate?(0,g.V)(new Date,new Date(e.birthDate)):0,r=e.certifications?e.certifications.split(",").map(e=>e.trim()):[],t=50+Math.floor(36*Math.random());return{name:e.name||"이름없음",age:s,gender:e.gender||"미지정",experience:e.experience||"경력 정보 없음",certifications:r,suitabilityScore:t,phone:e.phone,photoUrl:e.photoUrl}});return r.sort((e,s)=>s.suitabilityScore-e.suitabilityScore),{recommendations:r}}catch(e){return console.error("간병인 추천 과정에서 예기치 못한 오류가 발생했습니다:",e),{recommendations:[]}}}m.z.object({patientGender:m.z.enum(["남성","여성"]).optional().describe("돌봄이 필요한 환자의 성별"),patientBirthDate:m.z.string().optional().describe("돌봄이 필요한 환자의 생년월일 (YYYY-MM-DD 형식)"),careType:m.z.string().describe("필요한 돌봄의 유형 (예: 식사보조, 활동보조 등)."),requestedDateRange:m.z.object({from:m.z.string().optional(),to:m.z.string().optional()}).optional().describe("사용자가 돌봄을 요청한 날짜 범위 (YYYY-MM-DD 형식)."),requestedTime:m.z.string().optional().describe('사용자가 돌봄을 요청한 시간대 (예: "09:00 ~ 17:00" 또는 "시간 협의 가능").'),specificNeeds:m.z.string().describe("간병인에게 필요한 특정 요구사항 (예: 복약 관리, 거동 보조).")}),m.z.object({recommendations:m.z.array(m.z.object({name:m.z.string().describe("추천된 간병인의 이름."),age:m.z.number().describe("간병인의 나이"),gender:m.z.string().describe("간병인의 성별"),experience:m.z.string().describe("간병인의 주요 경력 및 경험 요약"),certifications:m.z.array(m.z.string()).describe("간병인이 보유한 자격증 목록"),suitabilityScore:m.z.number().describe("지정된 요구사항과 간병인이 얼마나 잘 맞는지 나타내는 점수(100점 만점)."),photoUrl:m.z.string().optional().describe("간병인의 프로필 사진 URL"),phone:m.z.string().describe("간병인의 연락처")})).describe("추천된 간병인 및 그들의 상세 정보 목록.")}),(0,f.D)([b]),(0,t.A)(b,"40f1fde166fb8119c83d2ab433d50050b5a6ed030f",null);var h=r(73547);let y=async()=>{(0,i.unstable_noStore)();let e=[];for(let s=1;s<=5;s++){let r=`CARECONNECT_ADMIN_EMAIL_${s}`,t=process.env[r];t&&t.includes("@")&&e.push(t)}return e};async function N(e){let{userName:s,userPhone:r,...t}=e,n=await b(t);if(n.recommendations.length>0)try{let e=process.env.CARECONNECT_RESEND_API_KEY;if(!e||e.length<5)console.warn("[Email Action] Resend API 키가 .env.local 파일에 설정되지 않았습니다. 추천 요청 이메일을 보낼 수 없습니다.");else{let n=await y(),a=new h.u(e);if(n&&n.length>0){let e=process.env.CARECONNECT_EMAIL_FROM||"onboarding@resend.dev",i="미지정";if(t.requestedDateRange){let{from:e,to:s}=t.requestedDateRange;e&&s&&e!==s?i=`${e} ~ ${s}`:e&&(i=e)}await a.emails.send({from:e,to:n,subject:`천사손길: 간병인 추천 요청 접수 (${s})`,html:`
                    <h1>간병인 추천 요청 접수</h1>
                    <p>새로운 간병인 추천 요청이 접수되었습니다. 아래 내용을 확인해주세요.</p>
                    <hr />
                    <p><strong>요청자 성명:</strong> ${s}</p>
                    <p><strong>요청자 연락처:</strong> ${r}</p>
                    <hr />
                    <h2>요청 내용 상세</h2>
                    <p><strong>돌봄 대상 성별:</strong> ${t.patientGender||"미지정"}</p>
                    <p><strong>돌봄 대상 생년월일:</strong> ${t.patientBirthDate||"미지정"}</p>
                    <p><strong>돌봄 유형:</strong> ${t.careType}</p>
                    <p><strong>희망 날짜:</strong> ${i}</p>
                    <p><strong>희망 시간:</strong> ${t.requestedTime||"미지정"}</p>
                    <p><strong>구체적인 필요 사항:</strong></p>
                    <p style="white-space: pre-wrap;">${t.specificNeeds}</p>
                    `})}}}catch(e){console.error("[Email Action] A critical error occurred during the recommendation request email process:",e)}return n}async function v(e){try{let s=process.env.CARECONNECT_RESEND_API_KEY;if(!s||s.length<5)return{success:!1,message:"이메일 서비스가 설정되지 않았습니다. 관리자에게 문의해주세요."};let r=new h.u(s),t=await y();if(!t||0===t.length)return{success:!1,message:"수신 이메일이 설정되지 않았습니다. 관리자 페이지에서 이메일을 추가해주세요."};let n=process.env.CARECONNECT_EMAIL_FROM||"onboarding@resend.dev",{userName:a,userPhone:i,caregiverName:o,caregiverAge:l,caregiverGender:c,caregiverPhone:d}=e;console.log("[Email Action] Attempting to send 'Caregiver Inquiry' email."),console.log(` - From: ${n}`),console.log(` - To: ${t.join(", ")}`),console.log(" - Resend Sandbox Note: In sandbox mode, emails can only be sent TO the verified email address used for Resend signup.");let{data:u,error:p}=await r.emails.send({from:n,to:t,subject:`천사손길: 간병인 지정 문의 (${a})`,html:`
        <h1>간병인 지정 문의</h1>
        <p>추천 시스템을 통해 특정 간병인에 대한 문의가 접수되었습니다.</p>
        <hr />
        <h2>문의자 정보</h2>
        <p><strong>성명:</strong> ${a}</p>
        <p><strong>연락처:</strong> ${i}</p>
        <hr />
        <h2>선택한 간병인 정보</h2>
        <p><strong>성명:</strong> ${o}</p>
        <p><strong>나이:</strong> ${l}세</p>
        <p><strong>성별:</strong> ${c}</p>
        <p><strong>연락처:</strong> ${d}</p>
        <hr />
        <p>빠른 시간 내에 문의자에게 연락하여 예약을 확정해주세요.</p>
      `});if(p){if(console.error("[Email Action] Resend API Error in submitCaregiverInquiry:",p),"missing_api_key"===p.name)return{success:!1,message:"이메일 서비스 API 키가 설정되지 않았습니다. .env 파일을 확인해주세요."};if("invalid_api_key"===p.name)return{success:!1,message:"이메일 서비스 API 키가 유효하지 않습니다. .env 파일을 확인해주세요."};if(p.message.includes("You can only send emails to"))return{success:!1,message:"테스트 모드에서는 Resend에 가입한 이메일로만 메일을 보낼 수 있습니다. 관리자 이메일 설정을 확인해주세요."};return{success:!1,message:"문의 접수 중 오류가 발생했습니다. 서버 로그를 확인해주세요."}}return console.log('[Email Action] "Caregiver Inquiry" email sent successfully. Resend ID:',u?.id),{success:!0,message:"문의가 성공적으로 접수되었습니다. 곧 연락드리겠습니다."}}catch(e){if(console.error("[Email Action] A critical error occurred in submitCaregiverInquiry:",e),e.message.toLowerCase().includes("missing api key"))return{success:!1,message:"이메일 서비스 API 키가 설정되지 않았습니다. .env 파일을 확인해주세요."};return{success:!1,message:"문의 접수 중 심각한 오류가 발생했습니다."}}}async function x(e){try{let s=process.env.CARECONNECT_RESEND_API_KEY;if(!s||s.length<5)return{success:!1,message:"이메일 서비스가 설정되지 않았습니다. 관리자에게 문의해주세요."};let r=new h.u(s),t=await y();if(!t||0===t.length)return{success:!1,message:"수신 이메일이 설정되지 않았습니다. 관리자 페이지에서 이메일을 추가해주세요."};let n=process.env.CARECONNECT_EMAIL_FROM||"onboarding@resend.dev",{patientName:a,guardianName:i,hospitalName:o,phoneNumber:l,caregiverName:c,servicePeriod:d,email:u,requestDetails:p}=e;console.log("[Email Action] Attempting to send 'Insurance Request' email."),console.log(` - From: ${n}`),console.log(` - To: ${t.join(", ")}`),console.log(" - Resend Sandbox Note: In sandbox mode, emails can only be sent TO the verified email address used for Resend signup.");let{data:g,error:m}=await r.emails.send({from:n,to:t,reply_to:u,subject:`천사손길: 보험서류 요청 (${a})`,html:`
        <h1>보험서류 요청</h1>
        <p><strong>환자 성명:</strong> ${a}</p>
        <p><strong>보호자 성명:</strong> ${i||"기입 안함"}</p>
        <p><strong>병원명:</strong> ${o||"기입 안함"}</p>
        <p><strong>연락처:</strong> ${l}</p>
        <p><strong>간병인 성명:</strong> ${c||"기입 안함"}</p>
        <p><strong>서비스 기간:</strong> ${d||"기입 안함"}</p>
        <p><strong>회신 받을 이메일:</strong> ${u||"기입 안함"}</p>
        <hr />
        <h2>요청 내용:</h2>
        <p style="white-space: pre-wrap;">${p||"내용 없음"}</p>
      `});if(m){if(console.error("[Email Action] Resend API Error in submitInsuranceRequest:",m),"missing_api_key"===m.name)return{success:!1,message:"이메일 서비스 API 키가 설정되지 않았습니다. .env 파일을 확인해주세요."};if("invalid_api_key"===m.name)return{success:!1,message:"이메일 서비스 API 키가 유효하지 않습니다. .env 파일을 확인해주세요."};if(m.message.includes("You can only send emails to"))return{success:!1,message:"테스트 모드에서는 Resend에 가입한 이메일로만 메일을 보낼 수 있습니다. 관리자 이메일 설정을 확인해주세요."};return{success:!1,message:"이메일 전송 중 오류가 발생했습니다. 서버 로그를 확인해주세요."}}return console.log('[Email Action] "Insurance Request" email sent successfully. Resend ID:',g?.id),{success:!0,message:"보험서류 요청이 성공적으로 접수되었습니다."}}catch(e){if(console.error("[Email Action] A critical error occurred in submitInsuranceRequest:",e),e.message.toLowerCase().includes("missing api key"))return{success:!1,message:"이메일 서비스 API 키가 설정되지 않았습니다. .env 파일을 확인해주세요."};return{success:!1,message:"이메일 전송 중 심각한 오류가 발생했습니다."}}}async function E(e){try{let s=process.env.CARECONNECT_RESEND_API_KEY;if(!s||s.length<5)return{success:!1,message:"이메일 서비스가 설정되지 않았습니다. 관리자에게 문의해주세요."};let r=new h.u(s),t=await y();if(!t||0===t.length)return{success:!1,message:"수신 이메일이 설정되지 않았습니다. 관리자 페이지에서 이메일을 추가해주세요."};let n=process.env.CARECONNECT_EMAIL_FROM||"onboarding@resend.dev",{patientName:a,phoneNumber:i,familyCaregiverName:o,hospitalName:l,carePeriod:c,email:d,requestDetails:u}=e,{data:p,error:g}=await r.emails.send({from:n,to:t,reply_to:d,subject:`천사손길: 가족 간병인 보험서류 요청 (${a})`,html:`
        <h1>가족 간병인 보험서류 요청</h1>
        <p><strong>환자 성명:</strong> ${a}</p>
        <p><strong>전화번호:</strong> ${i}</p>
        <p><strong>가족간병인 성명:</strong> ${o||"기입 안함"}</p>
        <p><strong>병원명:</strong> ${l||"기입 안함"}</p>
        <p><strong>간병기간:</strong> ${c||"기입 안함"}</p>
        <p><strong>회신 받을 이메일:</strong> ${d||"기입 안함"}</p>
        <hr />
        <h2>요청 내용:</h2>
        <p style="white-space: pre-wrap;">${u||"내용 없음"}</p>
      `});if(g){if(console.error("[Email Action] Resend API Error in submitFamilyInsuranceRequest:",g),"missing_api_key"===g.name)return{success:!1,message:"이메일 서비스 API 키가 설정되지 않았습니다. .env 파일을 확인해주세요."};if("invalid_api_key"===g.name)return{success:!1,message:"이메일 서비스 API 키가 유효하지 않습니다. .env 파일을 확인해주세요."};if(g.message.includes("You can only send emails to"))return{success:!1,message:"테스트 모드에서는 Resend에 가입한 이메일로만 메일을 보낼 수 있습니다. 관리자 이메일 설정을 확인해주세요."};return{success:!1,message:"이메일 전송 중 오류가 발생했습니다. 서버 로그를 확인해주세요."}}return console.log('[Email Action] "Family Insurance Request" email sent successfully. Resend ID:',p?.id),{success:!0,message:"가족 간병인 보험서류 요청이 성공적으로 접수되었습니다."}}catch(e){if(console.error("[Email Action] A critical error occurred in submitFamilyInsuranceRequest:",e),e.message.toLowerCase().includes("missing api key"))return{success:!1,message:"이메일 서비스 API 키가 설정되지 않았습니다. .env 파일을 확인해주세요."};return{success:!1,message:"이메일 전송 중 심각한 오류가 발생했습니다."}}}async function A(e){try{let s=process.env.CARECONNECT_RESEND_API_KEY;if(!s||s.length<5)return{success:!1,message:"이메일 서비스가 설정되지 않았습니다. 관리자에게 문의해주세요."};let r=new h.u(s),t=await y();if(!t||0===t.length)return{success:!1,message:"수신 이메일이 설정되지 않았습니다. 관리자 페이지에서 이메일을 추가해주세요."};let n=process.env.CARECONNECT_EMAIL_FROM||"onboarding@resend.dev",{name:a,phone:i,email:o,message:l}=e;console.log("[Email Action] Attempting to send 'General Inquiry' email."),console.log(` - From: ${n}`),console.log(` - To: ${t.join(", ")}`),console.log(" - Resend Sandbox Note: In sandbox mode, emails can only be sent TO the verified email address used for Resend signup.");let{data:c,error:d}=await r.emails.send({from:n,to:t,reply_to:o,subject:`천사손길: 일반 문의 (${a})`,html:`
        <h1>일반 문의</h1>
        <p><strong>성함:</strong> ${a}</p>
        <p><strong>연락처:</strong> ${i}</p>
        <p><strong>회신 받을 이메일:</strong> ${o||"기입 안함"}</p>
        <hr />
        <h2>문의 내용:</h2>
        <p style="white-space: pre-wrap;">${l||"내용 없음"}</p>
      `});if(d){if(console.error("[Email Action] Resend API Error in submitGeneralInquiry:",d),"missing_api_key"===d.name)return{success:!1,message:"이메일 서비스 API 키가 설정되지 않았습니다. .env 파일을 확인해주세요."};if("invalid_api_key"===d.name)return{success:!1,message:"이메일 서비스 API 키가 유효하지 않습니다. .env 파일을 확인해주세요."};if(d.message.includes("You can only send emails to"))return{success:!1,message:"테스트 모드에서는 Resend에 가입한 이메일로만 메일을 보낼 수 있습니다. 관리자 이메일 설정을 확인해주세요."};return{success:!1,message:"이메일 전송 중 오류가 발생했습니다. 서버 로그를 확인해주세요."}}return console.log('[Email Action] "General Inquiry" email sent successfully. Resend ID:',c?.id),{success:!0,message:"문의가 성공적으로 접수되었습니다."}}catch(e){if(console.error("[Email Action] A critical error occurred in submitGeneralInquiry:",e),e.message.toLowerCase().includes("missing api key"))return{success:!1,message:"이메일 서비스 API 키가 설정되지 않았습니다. .env 파일을 확인해주세요."};return{success:!1,message:"이메일 전송 중 심각한 오류가 발생했습니다."}}}async function w(e){try{let s=process.env.CARECONNECT_RESEND_API_KEY;if(!s||s.length<5)return{success:!1,message:"이메일 서비스가 설정되지 않았습니다. 관리자에게 문의해주세요."};let r=new h.u(s),t=await y();if(!t||0===t.length)return{success:!1,message:"수신 이메일이 설정되지 않았습니다. 관리자 페이지에서 이메일을 추가해주세요."};let n=process.env.CARECONNECT_EMAIL_FROM||"onboarding@resend.dev",{name:a,contact:i,region:o,birthDate:l,gender:c,photoDataUri:d,certifications:u,experience:p,selfIntroduction:g}=e,m=[];if(d){let e=Buffer.from(d.split(",")[1],"base64");m.push({filename:`${a}_profile.png`,content:e})}let{data:f,error:b}=await r.emails.send({from:n,to:t,subject:`천사손길: 새로운 간병인 지원서 도착 (${a})`,html:`
                <h1>새로운 간병인 지원서</h1>
                <p>새로운 간병인 지원서가 접수되었습니다. 아래 내용을 확인해주세요.</p>
                <hr />
                <h2>지원자 정보</h2>
                <p><strong>성명:</strong> ${a}</p>
                <p><strong>연락처:</strong> ${i}</p>
                <p><strong>성별:</strong> ${c}</p>
                <p><strong>생년월일:</strong> ${l}</p>
                <p><strong>근무 가능 지역:</strong> ${o.join(", ")}</p>
                <p><strong>경력:</strong> ${p}</p>
                <p><strong>보유 자격증:</strong> ${u||"기입 안함"}</p>
                <hr />
                <h2>자기소개</h2>
                <p style="white-space: pre-wrap;">${g||"내용 없음"}</p>
            `,attachments:m});if(b)return console.error("[Email Action] Resend API Error in submitSupportApplicationEmail:",b),{success:!1,message:"지원서 접수 중 오류가 발생했습니다. 서버 로그를 확인해주세요."};return console.log('[Email Action] "Support Application" email sent successfully. Resend ID:',f?.id),{success:!0,message:"간병인 지원서가 성공적으로 제출되었습니다. 검토 후 연락드리겠습니다."}}catch(e){if(console.error("[Email Action] A critical error occurred in submitSupportApplicationEmail:",e),e.message.toLowerCase().includes("missing api key"))return{success:!1,message:"이메일 서비스 API 키가 설정되지 않았습니다. .env 파일을 확인해주세요."};return{success:!1,message:"지원서 접수 중 심각한 오류가 발생했습니다."}}}(0,f.D)([y]),(0,t.A)(y,"7fa7109a7a4f7202ea167756883afc6afe088db907",null),m.z.object({userName:m.z.string(),userPhone:m.z.string(),caregiverName:m.z.string(),caregiverAge:m.z.number(),caregiverGender:m.z.string(),caregiverPhone:m.z.string()}),m.z.object({patientName:m.z.string(),guardianName:m.z.string().optional(),hospitalName:m.z.string().optional(),phoneNumber:m.z.string(),caregiverName:m.z.string().optional(),servicePeriod:m.z.string().optional(),email:m.z.string().optional(),requestDetails:m.z.string().optional()}),m.z.object({patientName:m.z.string(),phoneNumber:m.z.string(),familyCaregiverName:m.z.string().optional(),hospitalName:m.z.string().optional(),carePeriod:m.z.string().optional(),email:m.z.string().optional(),requestDetails:m.z.string().optional()}),m.z.object({name:m.z.string(),phone:m.z.string(),email:m.z.string().optional(),message:m.z.string().optional()}),m.z.object({name:m.z.string(),contact:m.z.string(),region:m.z.array(m.z.string()),birthDate:m.z.string(),gender:m.z.string(),photoDataUri:m.z.string().optional(),certifications:m.z.string().optional(),experience:m.z.string(),selfIntroduction:m.z.string().optional()}),(0,f.D)([N,v,x,E,A,w]),(0,t.A)(N,"403b1926a62851f00d02a67ee16239c7950f18fccf",null),(0,t.A)(v,"403919fc8d91abc201f0814a920f037e514e236978",null),(0,t.A)(x,"40b76febdc19b877f2e1c53c0e1d57d69d95a7a68f",null),(0,t.A)(E,"4054a999ad5b286b5e864bac52aa1de463db808cab",null),(0,t.A)(A,"40770e47dc52ebda61511fcd8d840540f7538f0639",null),(0,t.A)(w,"404453e95c49c6ff0ac25c2637a463265b0b599082",null)},70440:(e,s,r)=>{r.r(s),r.d(s,{default:()=>n});var t=r(31658);let n=async e=>[{type:"image/x-icon",sizes:"16x16",url:(0,t.fillMetadataSegment)(".",await e.params,"favicon.ico")+""}]},78963:(e,s,r)=>{r.d(s,{BT:()=>c,Wu:()=>d,ZB:()=>l,Zp:()=>i,aR:()=>o});var t=r(37413),n=r(61120),a=r(10974);let i=n.forwardRef(({className:e,...s},r)=>(0,t.jsx)("div",{ref:r,className:(0,a.cn)("rounded-lg border bg-card text-card-foreground shadow-sm",e),...s}));i.displayName="Card";let o=n.forwardRef(({className:e,...s},r)=>(0,t.jsx)("div",{ref:r,className:(0,a.cn)("flex flex-col space-y-1.5 p-6",e),...s}));o.displayName="CardHeader";let l=n.forwardRef(({className:e,...s},r)=>(0,t.jsx)("h3",{ref:r,className:(0,a.cn)("text-2xl font-semibold leading-none tracking-tight",e),...s}));l.displayName="CardTitle";let c=n.forwardRef(({className:e,...s},r)=>(0,t.jsx)("p",{ref:r,className:(0,a.cn)("text-sm text-muted-foreground",e),...s}));c.displayName="CardDescription";let d=n.forwardRef(({className:e,...s},r)=>(0,t.jsx)("div",{ref:r,className:(0,a.cn)("p-6 pt-0",e),...s}));d.displayName="CardContent",n.forwardRef(({className:e,...s},r)=>(0,t.jsx)("div",{ref:r,className:(0,a.cn)("flex items-center p-6 pt-0",e),...s})).displayName="CardFooter"},89667:(e,s,r)=>{r.d(s,{p:()=>i});var t=r(60687),n=r(43210),a=r(4780);let i=n.forwardRef(({className:e,type:s,...r},n)=>(0,t.jsx)("input",{type:s,className:(0,a.cn)("flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",e),ref:n,...r}));i.displayName="Input"}};